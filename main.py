#!/usr/bin/env python3

"""
──────────────────────────────────────────────────────
  DOCUMENTACION SOBRE EL FORMATO DEL RISC-V
──────────────────────────────────────────────────────
https://msyksphinz-self.github.io/riscv-isadoc/html/rvi.html


 TIPO I: Instrucciones aritméticas y de carga (Ex. addi, lw)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
│1 0 9 8 7 6 5 4 3 2 1 0│9 8 7 6 5│4 3 2│1 0 9 8 7  │6 5 4 3 2 1 0│
├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┼─┴─┴─┴─┴───┼─┴─┴─┴─┴─┴─┴─┤
│      imm12            |   rs1   |func3|   rd      |    opcode   |
╰───────────────────────┴─────────┴─────┴───────────┴─────────────╯


 TIPO R: Hay 3 registros (Ex. add, sub)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
│1 0 9 8 7 6 5│4 3 2 1 0│9 8 7 6 5│4 3 2│1 0 9 8 7  │6 5 4 3 2 1 0│
├─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┼─┴─┴─┴─┴───┼─┴─┴─┴─┴─┴─┴─┤
│    func7    │  rs2    |   rs1   |func3|   rd      |   opcode    |
╰─────────────┴─────────┴─────────┴─────┴───────────┴─────────────╯


TIPO S: Instrucciones store (Ex. sw, sb....)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
│1 0 9 8 7 6 5│4 3 2 1 0│9 8 7 6 5│4 3 2│1 0 9 8 7  │6 5 4 3 2 1 0│
├─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┼─┴─┴─┴─┴───┼─┴─┴─┴─┴─┴─┴─┤
│ offset[11:5]│  rs2    |   rs1   |func3| off[4:0]  |   opcode    |
╰─────────────┴─────────┴─────────┴─────┴───────────┴─────────────╯


TIPO B: Instrucciones de salto condicional (Ex. beq, blt...)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
│1 0 9 8 7 6 5│4 3 2 1 0│9 8 7 6 5│4 3 2│1 0 9 8 7  │6 5 4 3 2 1 0│
├─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┼─┴─┴─┴─┴───┼─┴─┴─┴─┴─┴─┴─┤
│ off[12|10:5]│  rs2    |   rs1   |func3|off[4:1|11]|   opcode    |
╰─────────────┴─────────┴─────────┴─────┴───────────┴─────────────╯


TIPO U: Instrucciones de tipo UPPER (Ex. lui, auipc)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
│1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2│1 0 9 8 7  │6 5 4 3 2 1 0│
├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴───┼─┴─┴─┴─┴─┴─┴─┤
│              imm[31:12]               |    rd     |    opcode   |
╰───────────────────────────────────────┴───────────┴─────────────╯


TIPO J: Salto incondicional (Ex. jal)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
│1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2│1 0 9 8  7 │6 5 4 3 2 1 0│
├─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴──┴──┼─┴─┴─┴─┴─┴─┴─┤
│        offset[20|10:1|11|19:12]       |    rd     |    opcode   |
╰───────────────────────────────────────┴───────────┴─────────────╯


TIPO ECALL

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
│1 0 9 8 7 6 5│4 3 2 1 0│9 8 7 6 5│4 3 2│1 0 9 8 7│6 5 4 3 2 1 0│
├─┴─┴─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┼─┴─┴─┴─┴─┼─┴─┴─┴─┴─┴─┴─┤
│    0        │  func5  |    0    | 0   |   0     |   opcode    |
╰─────────────┴─────────┴─────────┴─────┴─────────┴─────────────╯
"""
"""
    //-- TODO
    //----- Modo privilegiado
    //-- csrrw
    //-- csrrs
    //-- csrrc
    //-- csrrwi
    //-- csrrsi
    //-- csrrci
    //-- uret
    //-- sret
    //-- mret
    //-- wfi
    //-- fence
    //-- fence.i
    //-- sfence.vma
    //----RV64I
    //-- addiw
    //-- slliw
    //-- srliw
    //-- sraiw
    //-- addw
    //-- subw
    //-- sllw
    //-- srlw
    //-- sraw
    //-- lwu
"""

# -- Instruccion de prueba
inst = 0x0000_0013

# -- Obtener el campo opcode
OPCODE_MASK = 0b111_1111

# -- Imprimir la instruccion
print(f"* Instruccion: {inst:#010x}")
