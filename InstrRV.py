"""
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
  DOCUMENTACION SOBRE EL FORMATO DEL RISC-V
â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
https://msyksphinz-self.github.io/riscv-isadoc/html/rvi.html


 TIPO I: Instrucciones aritmÃ©ticas y de carga (Ex. addi, lw)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
â”‚1 0 9 8 7 6 5 4 3 2 1 0â”‚9 8 7 6 5â”‚4 3 2â”‚1 0 9 8 7  â”‚6 5 4 3 2 1 0â”‚
â”œâ”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”€â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¤
â”‚      imm12            |   rs1   |func3|   rd      |    opcode   |
â”œâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¼â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”¤
|<â”€â”€â”€â”€â”€â”€â”€ 12 â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€>|â—€â”€â”€â”€â”€â”€â”€â”€â–¶|<â”€3â”€>|<â”€â”€â”€ 5 â”€â”€â”€>|<â”€â”€â”€â”€ 7 â”€â”€â”€â”€>|

* addi rd, rs1, imm12  -->  rd = rs1 + ext(imm12)


 TIPO R: Hay 3 registros (Ex. add, sub)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
â”‚1 0 9 8 7 6 5â”‚4 3 2 1 0â”‚9 8 7 6 5â”‚4 3 2â”‚1 0 9 8 7  â”‚6 5 4 3 2 1 0â”‚
â”œâ”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”€â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¤
â”‚    func7    â”‚  rs2    |   rs1   |func3|   rd      |   opcode    |
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯


TIPO S: Instrucciones store (Ex. sw, sb....)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
â”‚1 0 9 8 7 6 5â”‚4 3 2 1 0â”‚9 8 7 6 5â”‚4 3 2â”‚1 0 9 8 7  â”‚6 5 4 3 2 1 0â”‚
â”œâ”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”€â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¤
â”‚ offset[11:5]â”‚  rs2    |   rs1   |func3| off[4:0]  |   opcode    |
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯


TIPO B: Instrucciones de salto condicional (Ex. beq, blt...)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
â”‚1 0 9 8 7 6 5â”‚4 3 2 1 0â”‚9 8 7 6 5â”‚4 3 2â”‚1 0 9 8 7  â”‚6 5 4 3 2 1 0â”‚
â”œâ”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”€â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¤
â”‚ off[12|10:5]â”‚  rs2    |   rs1   |func3|off[4:1|11]|   opcode    |
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯


TIPO U: Instrucciones de tipo UPPER (Ex. lui, auipc)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
â”‚1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2â”‚1 0 9 8 7  â”‚6 5 4 3 2 1 0â”‚
â”œâ”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”€â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¤
â”‚              imm[31:12]               |    rd     |    opcode   |
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯


TIPO J: Salto incondicional (Ex. jal)

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
â”‚1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2â”‚1 0 9 8  7 â”‚6 5 4 3 2 1 0â”‚
â”œâ”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”€â”´â”€â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¤
â”‚        offset[20|10:1|11|19:12]       |    rd     |    opcode   |
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯


TIPO ECALL

 3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
â”‚1 0 9 8 7 6 5â”‚4 3 2 1 0â”‚9 8 7 6 5â”‚4 3 2â”‚1 0 9 8 7â”‚6 5 4 3 2 1 0â”‚
â”œâ”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¼â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”´â”€â”¤
â”‚    0        â”‚  func5  |    0    | 0   |   0     |   opcode    |
â•°â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”´â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â•¯
"""
"""
    //-- TODO
    //----- Modo privilegiado
    //-- csrrw
    //-- csrrs
    //-- csrrc
    //-- csrrwi
    //-- csrrsi
    //-- csrrci
    //-- uret
    //-- sret
    //-- mret
    //-- wfi
    //-- fence
    //-- fence.i
    //-- sfence.vma
    //----RV64I
    //-- addiw
    //-- slliw
    //-- srliw
    //-- sraiw
    //-- addw
    //-- subw
    //-- sllw
    //-- srlw
    //-- sraw
    //-- lwu
"""


# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
#   Clase para representar una instruccion del RISCV
# â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
class InstrRV:

    # â”€â”€â”€â”€â”€â”€â”€â”€ CONSTANTES PARA DEFINIR LOS PARAMETROS DE LA ISA RISC-V
    # â”€â”€ Las posiciones de los campos indican el numero de bit donde
    # â”€â”€ se situa el bit de MENOR PESO
    # â”€â”€ El tamaÃ±o se condifica en UNARIO. Si un campo ocupa 3 bits,
    # â”€â”€ su tamaÃ±o en unario es 111

    # â”€â”€ OPCODE
    OPCODE_POS = 0
    OPCODE_SIZE = 0b111_1111
    OPCODE_MASK = OPCODE_SIZE << OPCODE_POS

    # â”€â”€ FUNC3
    FUNC3_POS = 12
    FUNC3_SIZE = 0b111
    FUNC3_MASK = FUNC3_SIZE << FUNC3_POS

    # â”€â”€ RD: Registro destino
    RD_POS = 7
    RD_SIZE = 0b1_1111
    RD_MASK = RD_SIZE << RD_POS

    # â”€â”€ RS1: Registro fuente 1
    RS1_POS = 15
    RS1_SIZE = 0b1_1111
    RS1_MASK = RS1_SIZE << RS1_POS

    # â”€â”€ RS2: Registro fuente 2
    RS2_POS = 20
    RS2_SIZE = 0b1_1111
    RS2_MASK = RS2_SIZE << RS2_POS

    # â”€â”€ IMM12: Inmediato de 12 bits (TIPO I)
    IMM12_POS = 20
    IMM12_SIZE = 0b1111_1111_1111
    IMM12_MASK = IMM12_SIZE << IMM12_POS

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #   CONSTRUCTOR a partir del codigo maquina
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    def __init__(self, mcode: int) -> None:

        # â”€â”€ Codigo maquina de la instruccion
        self.mcode = mcode

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #   opcode de una instrucciÃ³n en cÃ³digo mÃ¡quina
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    @property
    def opcode(self) -> int:

        # â”€â”€ Obtener el codigo de operacion y devolverlo
        opcode = (self.mcode & InstrRV.OPCODE_MASK) >> InstrRV.OPCODE_POS
        return opcode

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #  Func3
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    @property
    def func3(self) -> int:

        # â”€â”€ Obtener el campo func3 y devolverlo
        func3 = (self.mcode & InstrRV.FUNC3_MASK) >> InstrRV.FUNC3_POS
        return func3

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #  Registro destino
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    @property
    def rd(self) -> int:

        # â”€â”€ Obtener el registro destino y devolverlo
        rd = (self.mcode & InstrRV.RD_MASK) >> InstrRV.RD_POS
        return rd

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #  Registro fuente 1
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    @property
    def rs1(self) -> int:

        # â”€â”€ Obtener el registro fuente 1 y devolverlo
        rs1 = (self.mcode & InstrRV.RS1_MASK) >> InstrRV.RS1_POS
        return rs1

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #  Valor immediato de 12 bits
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    @property
    def imm12(self) -> int:

        # â”€â”€ Obtener el immediato de 12 bits y devolverlo
        imm12 = (self.mcode & InstrRV.IMM12_MASK) >> InstrRV.IMM12_POS
        return imm12

    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    #  DEBUG! Imprimir la instruccion
    # â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€
    def debug(self):
        print(f"ðŸŸ¢ Instruccion: {self.mcode:#010x}")
        print(f"  â€¢ Opcode: {self.opcode:#04x}")
        print(f"  â€¢ Func3: {self.func3:#05b}")
        print(f"  â€¢ Rd: x{self.rd}")
        print(f"  â€¢ Rs1: x{self.rs1}")
        print(f"  â€¢ Imm12: {self.imm12:#05x}")
        print()
